diff --git a/homeassistant/components/google_assistant_sdk/__init__.py b/homeassistant/components/google_assistant_sdk/__init__.py
index 24b71dd018..65e4db54b6 100644
--- a/homeassistant/components/google_assistant_sdk/__init__.py
+++ b/homeassistant/components/google_assistant_sdk/__init__.py
@@ -5,12 +5,11 @@ import dataclasses
 
 import aiohttp
 from gassist_text import TextAssistant
-from google.oauth2.credentials import Credentials
 import voluptuous as vol
 
 from homeassistant.components import conversation
 from homeassistant.config_entries import ConfigEntry, ConfigEntryState
-from homeassistant.const import CONF_ACCESS_TOKEN, CONF_NAME, Platform
+from homeassistant.const import CONF_NAME, Platform
 from homeassistant.core import (
     HomeAssistant,
     ServiceCall,
@@ -29,7 +28,9 @@ from .const import DATA_MEM_STORAGE, DATA_SESSION, DOMAIN, SUPPORTED_LANGUAGE_CO
 from .helpers import (
     GoogleAssistantSDKAudioView,
     InMemoryStorage,
+    async_create_credentials,
     async_send_text_commands,
+    parse_response,
 )
 
 SERVICE_SEND_TEXT_COMMAND = "send_text_command"
@@ -164,12 +165,12 @@ class GoogleAssistantConversationAgent(conversation.AbstractConversationAgent):
             await session.async_ensure_token_valid()
             self.assistant = None
         if not self.assistant or user_input.language != self.language:
-            credentials = Credentials(session.token[CONF_ACCESS_TOKEN])
+            credentials = await async_create_credentials(self.hass, self.entry)
             self.language = user_input.language
-            self.assistant = TextAssistant(credentials, self.language)
+            self.assistant = TextAssistant(credentials, self.language, display=True)
 
         resp = self.assistant.assist(user_input.text)
-        text_response = resp[0] or "<empty response>"
+        text_response = parse_response(self.hass, user_input.text, resp)
 
         intent_response = intent.IntentResponse(language=user_input.language)
         intent_response.async_set_speech(text_response)
diff --git a/homeassistant/components/google_assistant_sdk/const.py b/homeassistant/components/google_assistant_sdk/const.py
index d63aec0ebd..e816c12fbb 100644
--- a/homeassistant/components/google_assistant_sdk/const.py
+++ b/homeassistant/components/google_assistant_sdk/const.py
@@ -7,6 +7,7 @@ DEFAULT_NAME: Final = "Google Assistant SDK"
 
 CONF_LANGUAGE_CODE: Final = "language_code"
 
+DATA_CREDENTIALS: Final = "credentials"
 DATA_MEM_STORAGE: Final = "mem_storage"
 DATA_SESSION: Final = "session"
 
diff --git a/homeassistant/components/google_assistant_sdk/helpers.py b/homeassistant/components/google_assistant_sdk/helpers.py
index 5ae39c98f3..c5fedc8b0b 100644
--- a/homeassistant/components/google_assistant_sdk/helpers.py
+++ b/homeassistant/components/google_assistant_sdk/helpers.py
@@ -3,12 +3,15 @@ from __future__ import annotations
 
 from dataclasses import dataclass
 from http import HTTPStatus
+import json
 import logging
+import os
 from typing import Any
 import uuid
 
 import aiohttp
 from aiohttp import web
+from bs4 import BeautifulSoup
 from gassist_text import TextAssistant
 from google.oauth2.credentials import Credentials
 
@@ -29,6 +32,7 @@ from homeassistant.helpers.event import async_call_later
 
 from .const import (
     CONF_LANGUAGE_CODE,
+    DATA_CREDENTIALS,
     DATA_MEM_STORAGE,
     DATA_SESSION,
     DOMAIN,
@@ -56,13 +60,29 @@ class CommandResponse:
     text: str
 
 
-async def async_send_text_commands(
-    hass: HomeAssistant, commands: list[str], media_players: list[str] | None = None
-) -> list[CommandResponse]:
-    """Send text commands to Google Assistant Service."""
-    # There can only be 1 entry (config_flow has single_instance_allowed)
-    entry: ConfigEntry = hass.config_entries.async_entries(DOMAIN)[0]
-
+async def async_create_credentials(
+    hass: HomeAssistant, entry: ConfigEntry
+) -> Credentials:
+    """Create credentials to pass to TextAssistant."""
+    # Credentials already exist in memory, return that.
+    if DATA_CREDENTIALS in hass.data[DOMAIN][entry.entry_id]:
+        return hass.data[DOMAIN][entry.entry_id][DATA_CREDENTIALS]
+
+    # Check if there is a json file created with google-oauthlib-tool with application type of Desktop app.
+    # This is needed for personal results to work.
+    credentials_json_filename = hass.config.path(
+        "google_assistant_sdk_credentials.json"
+    )
+    if os.path.isfile(credentials_json_filename):
+        with open(credentials_json_filename, encoding="utf-8") as credentials_json_file:
+            credentials = Credentials(token=None, **json.load(credentials_json_file))
+            # Store credentials in memory to avoid reading the file every time.
+            hass.data[DOMAIN][entry.entry_id][DATA_CREDENTIALS] = credentials
+            return credentials
+
+    # Create credentials using only the access token, application type of Web application,
+    # using the LocalOAuth2Implementation.
+    # Personal results don't work with this.
     session: OAuth2Session = hass.data[DOMAIN][entry.entry_id][DATA_SESSION]
     try:
         await session.async_ensure_token_valid()
@@ -70,16 +90,25 @@ async def async_send_text_commands(
         if 400 <= err.status < 500:
             entry.async_start_reauth(hass)
         raise err
+    return Credentials(session.token[CONF_ACCESS_TOKEN])
 
-    credentials = Credentials(session.token[CONF_ACCESS_TOKEN])
+
+async def async_send_text_commands(
+    hass: HomeAssistant, commands: list[str], media_players: list[str] | None = None
+) -> list[CommandResponse]:
+    """Send text commands to Google Assistant Service."""
+    # There can only be 1 entry (config_flow has single_instance_allowed)
+    entry: ConfigEntry = hass.config_entries.async_entries(DOMAIN)[0]
+
+    credentials = await async_create_credentials(hass, entry)
     language_code = entry.options.get(CONF_LANGUAGE_CODE, default_language_code(hass))
     with TextAssistant(
-        credentials, language_code, audio_out=bool(media_players)
+        credentials, language_code, audio_out=bool(media_players), display=True
     ) as assistant:
         command_response_list = []
         for command in commands:
             resp = assistant.assist(command)
-            text_response = resp[0]
+            text_response = parse_response(hass, command, resp)
             _LOGGER.debug("command: %s\nresponse: %s", command, text_response)
             audio_response = resp[2]
             if media_players and audio_response:
@@ -104,6 +133,25 @@ async def async_send_text_commands(
         return command_response_list
 
 
+def parse_response(hass: HomeAssistant, command: str, resp):
+    """Parse a response from Google Assistant API Service and fires an event containing request and response."""
+    response = ""
+    if resp[0]:
+        response = resp[0]
+    elif resp[1]:
+        soup = BeautifulSoup(resp[1], "html.parser")
+        card_content = soup.find("div", id="assistant-card-content")
+        if card_content:
+            html = card_content
+        response = html.get_text(separator="\n", strip=True)
+    event_data = {
+        "request": command,
+        "response": response,
+    }
+    hass.bus.async_fire(DOMAIN + "_custom_event", event_data)
+    return response
+
+
 def default_language_code(hass: HomeAssistant):
     """Get default language code based on Home Assistant config."""
     language_code = f"{hass.config.language}-{hass.config.country}"
